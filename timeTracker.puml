@startuml

class Project extends Node{
    -children : ArrayList<Node>
    -path : String
    -{static}logger : Logger
    -invariant()
    +acceptVisitor(visitor : Visitor)
    +updateTree(period : Long, endTime : LocalDateTime)
    +save(path : String, jsonObject : JSONObject)

}

abstract class Node {
    -name : string
    -tags : List<String>
    -father : Node
    -startTime : LocalDateTime
    -endTime : LocalDateTime
    -totalWorkingTime : Duration
    +{abstract} acceptVisitor(visitor : Visitor)
    +{abstract} updateTree(period : Long, endTime : LocalDateTime)
    #{abstract} toJson() : JSONObject
}

class Task extends Node{
    -{static}logger : Logger
    -timeIntervals : List<TimeInterval>
    -lastAdded : TimeInterval
    -invariant()
    +startTask()
    +stopTask()
    +acceptVisitor(visit : Visitor)
    +updateTree(period : Long, endTime : LocalDateTime)

}

class Client {
+ {static}main(args : String[])
+{static}testA() : Project
+{static}testB() : Project
+{static}testPersistance()
+{static}testSearchByTag()
+{static}loadTest()
}

class TimeInterval {
    -task : Task
    -startTime : LocalDateTime
    -endTime : LocalDateTime
    -totalWorkingTime : Duration
    -{static} logger : Logger
    +update(o : Observable, arg : Object)
    +acceptVisitor(visit : Visitor)
    +toJson() : JSONObject
}
package java.util <<Folder>> {
    interface Observer{
        +update(arg0 : Observable,
        arg1 : Object)
    }
    abstract class Observable{
        +addObserver (ob: Observer)
        +deleteObserver (ob: Observer)
        +setChanged()
        +notifyObservers(arg0: Observable, arg1: Object)
    }
}

class Clock{
    -timerTask : TimerTask
    -timer : Timer
    -{static}period : long
    -{static}uniqueInstance : Clock
    -stopClock : boolean
    -{static}logger : Logger
    +stopClock()
    -tick()
    +getInstance() : Clock
}

interface Visitor {
    +visitTask(t : Task)
    +visitProject(p : Project)
    +visitTimeInterval(interval : TimeInterval)
}
class TreePrinter implements Visitor{
     -root : Project
     -{static}logger : Logger
     -formatter : DateTimeFormatter
     +visitTask(t : Task)
     +visitProject(p : Project)
     +visitTimeInterval(interval : TimeInterval)
     +update(o : Observable, arg : Object)
}
class SearchByTag implements Visitor{
    -tag: String
    -nodesFound: List<String>
    -{static}logger: Logger
    +visitTask(t : Task)
    +visitProject(p : Project)
    +visitTimeInterval(interval : TimeInterval)
    +toString() : String
}
Visitor -[hidden]right- Observable
Node <--* Project : "*" nodes
TimeInterval "*"<--*  Task : timeintervals
TimeInterval ..|> Observer
Observer <--o Observable : "*"observers
Observable <|-- Clock
Client  o-->"*" Node

@enduml
